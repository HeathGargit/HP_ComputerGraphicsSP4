#include <gl_core_4_4.h>
#include "MyApplication.h"
#include <GLFW\glfw3.h>
#include <cstdio>
#include <Gizmos.h>
#include <glm/glm.hpp>
#include <glm/ext.hpp>
#include "Camera.h"
#include "Vertex.h"
#include "Shaderinator.h"
#include "OBJVertex.h"
#include "OpenGLInfo.h"
#include "tiny_obj_loader.h"
#include "Objectinator.h"

using namespace aie;
using glm::vec3;
using glm::vec4;
using glm::mat4;

MyApplication::MyApplication(const char* n)
{
	m_name = n;
	m_window = nullptr;
	m_camera = nullptr;
	m_VAO = 0;
	m_VBO = 0;
	m_IBO = 0;
}

bool MyApplication::startup()
{
	//check if the glfw works
	if (glfwInit() == false)
	{
		return false;
	}

	//code to do stuff in here
	m_window = glfwCreateWindow(1600, 900, m_name, nullptr, nullptr);

	//check that the return values are working
	if (m_window == nullptr)
	{
		glfwTerminate(); //shut down the graphics system
		return false; //return an error code
	}

	//make the window the current context
	glfwMakeContextCurrent(m_window);

	//do stuff to window
	if (ogl_LoadFunctions() == ogl_LOAD_FAILED)
	{
		glfwDestroyWindow(m_window);
		glfwTerminate();
		return false;
	}

	//OpenGLFuncs are Now Available! Congrats!
	auto major = ogl_GetMajorVersion();
	auto minor = ogl_GetMinorVersion();
	printf("GL: %i.%i\n", major, minor);

	//Gizmos::create(1000, 1000, 1000, 1000);//gizmos is an AIE thing to make drawing primatives easy

	//these set up the camera
	//VIEW DEFINES WHERE THE CAMERA IS
	mat4 view = glm::lookAt(vec3(0, 20.0f, 0.1f)/*where the camera is?*/, vec3(0, 0, 0)/*what you're looking at*/, vec3(0, 1, 0)/*upwards direction*/);
	//PROJECITON DEFINES THE ANGLE OF THE VIEW
	mat4  projection = glm::perspective(glm::pi<float>() * 0.25f, 16.f / 9.f/*aspect ratio of the projection*/, 0.1f/*near clipping plane*/, 1000.f/*far clipping plane*/);
	//THESE ALWAYS HAVE TO BE MULTIPLIED IN THIS ORDER!!!! (otherwise it will look weird)

	m_camera = new Camera(m_window, glm::inverse(view));
	m_camera->setPerspecitve(glm::pi<float>() * 0.25f, 16.f / 9.f, 0.1f, 1000.f);
	//m_camera->setPerspecitve(projection);

	glEnable(GL_DEPTH_TEST);

	glEnable(GL_LINE_SMOOTH);
	glEnable(GL_BLEND);
	glBlendFunc(GL_SRC_ALPHA, GL_ONE_MINUS_SRC_ALPHA);

	int success = GL_FALSE;

	Shaderinator vertexShader("./shaders/week3vertexshader.txt", GL_VERTEX_SHADER);
	Shaderinator fragmentShader("./shaders/week3fragmentshader.txt", GL_FRAGMENT_SHADER);

	//create the shader "program" by attaching the tweo compiled shaders and linking them together
	m_programID = glCreateProgram();
	glAttachShader(m_programID, vertexShader.getShader());
	glAttachShader(m_programID, fragmentShader.getShader());
	glLinkProgram(m_programID);

	//compile the program(?)
	glGetProgramiv(m_programID, GL_LINK_STATUS, &success); //try to compile the program
	if (success == GL_FALSE) //check if program compiled successfully, if not
	{
		int infoLogLength = 0;
		glGetProgramiv(m_programID, GL_INFO_LOG_LENGTH, &infoLogLength);
		char* infoLog = new char[infoLogLength];

		glGetProgramInfoLog(m_programID, infoLogLength, 0, infoLog);
		printf("Error: Failed to link shader Program!\n");
		printf("%s\n", infoLog);
		delete[] infoLog;
	}

	Objectinator m_Bunny("./models/stanford/Bunny.obj");
	m_Objects.push_back(m_Bunny);
	
	//setting up deltatime
	currentTime = (float)glfwGetTime();
	deltaTime = 0;

	return true;
}

bool MyApplication::update()
{
	//if the window is told to close (by the close button?) or the escape key is pressed
	if (glfwWindowShouldClose(m_window) != false || glfwGetKey(m_window, GLFW_KEY_ESCAPE) == GLFW_PRESS)
	{
		//return false to end the main app loop.
		return false;
	}

	//update deltatime
	float previousTime = currentTime;
	currentTime = (float)glfwGetTime();
	deltaTime = currentTime - previousTime;

	//update the camera
	m_camera->update(deltaTime);

	//get inputs
	glfwPollEvents();

	return true;
}

void MyApplication::draw()
{
	glClearColor(0.4f, 0.4f, 0.4f, 1.0f); //background colour
	glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT); //this cleares the screen and draws the background colour?

	glEnable(GL_DEPTH_TEST); //"enables the depth buffer" - something something how far things are drawn away from camera, like a draw order.

	glUseProgram(m_programID);

	unsigned int projectionViewUniform = glGetUniformLocation(m_programID, "projectionViewWorldMatrix");
	glUniformMatrix4fv(projectionViewUniform, 1, false, glm::value_ptr(m_camera->projectView()));

	//draw all your objects.
	for (auto object : m_Objects)
	{
		object.draw();
	}
	
	//unbind the drawing thingo
	glBindVertexArray(0);

	glfwSwapBuffers(m_window); //double buffering
}

void MyApplication::shutdown()
{
	glfwSetInputMode(m_window, GLFW_CURSOR, GLFW_CURSOR_NORMAL);

	//destroy the camera
	delete m_camera;

	//destroy the gizmos
	//Gizmos::destroy();
	//destroy the window context thing.
	glfwDestroyWindow(m_window);

	//terminate the glfw
	glfwTerminate();
}

void MyApplication::createOpenGLBuffers(tinyobj::attrib_t & attribs, std::vector<tinyobj::shape_t>& shapes)
{
	m_glInfo.resize(shapes.size());
	
	//grab each shape
	int shapeIndex = 0;
	for (auto shape : shapes)
	{
		//Generate (allocate space?) for buffers
		glGenVertexArrays(1, &m_glInfo[shapeIndex].m_VAO);
		glGenBuffers(1, &m_glInfo[shapeIndex].m_VBO);

		glBindVertexArray(m_glInfo[shapeIndex].m_VAO); //binds the vertex array thingo. this starts the "recording" of stuff that happens.
		m_glInfo[shapeIndex].m_faceCount = shape.mesh.num_face_vertices.size();

		//collect triangle vertices
		std::vector<OBJVertex> vertices;
		int index = 0;
		for (auto face : shape.mesh.num_face_vertices)
		{
			for (int i = 0; i < 3; i++)
			{
				tinyobj::index_t idx = shape.mesh.indices[index + i];

				OBJVertex v = { 0 };
				//positions
				v.x = attribs.vertices[3 * idx.vertex_index + 0];
				v.y = attribs.vertices[3 * idx.vertex_index + 1];
				v.z = attribs.vertices[3 * idx.vertex_index + 2];
				//normals
				if (attribs.normals.size() > 0)
				{
					v.nx = attribs.normals[3 * idx.normal_index + 0];
					v.ny = attribs.normals[3 * idx.normal_index + 1];
					v.nz = attribs.normals[3 * idx.normal_index + 2];
				}
				//texture coords
				if (attribs.texcoords.size() > 0)
				{
					v.u = attribs.texcoords[2 * idx.texcoord_index + 0];
					v.v = attribs.texcoords[2 * idx.texcoord_index + 1];
				}

				vertices.push_back(v);
			}
			index += face;
		}

		//bind vertex data - this puts all the data into the buffer for the vid card.
		glBindBuffer(GL_ARRAY_BUFFER, m_glInfo[shapeIndex].m_VBO); //bind the vertex buffer for input
		glBufferData(GL_ARRAY_BUFFER, vertices.size() * sizeof(OBJVertex), vertices.data(), GL_STATIC_DRAW); //input the vertex data into the buffer

		//this sets up the first three floats of each vertex as the position
		glEnableVertexAttribArray(0); //position
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_TRUE, sizeof(OBJVertex), 0);//this defines the position as three floats with offset of 0 form the start of the vertex

		glEnableVertexAttribArray(1); //normal
		glVertexAttribPointer(1, 3, GL_FLOAT, GL_TRUE, sizeof(OBJVertex), (void*)offsetof(OBJVertex, nx));//this defines the normal as three floats with offset of 12 bytes form the start of the vertex

		glEnableVertexAttribArray(2); //texture data
		glVertexAttribPointer(2, 2, GL_FLOAT, GL_TRUE, sizeof(OBJVertex), (void*)offsetof(OBJVertex, u));//this defines the texture map as two floats with offset of 24 bytes form the start of the vertex

		glBindVertexArray(0); //this "unbinds" the vertex array ("stops recording")
		glBindBuffer(GL_ARRAY_BUFFER, 0); //this unbinds the vertex buffer for input
		shapeIndex++;
	}	
}